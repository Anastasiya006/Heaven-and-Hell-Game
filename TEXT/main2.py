#############################################
## File Name: new.py
## Description: a platformer with two different kinds of gravities; characters are controlled with the same keys
#############################################

import pygame
import math

pygame.init()
clock = pygame.time.Clock()
FPS = 60

##screen attributes
SCREEN_WIDTH = 1296
# SCREEN_WIDTH = 1728
# SCREEN_WIDTH = 2592
SCREEN_HEIGHT = 768
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Heaven and Hell Platformer')

##maps for levels
# level1_map = [[0 for i in range(36)],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0 for i in range(36)],
#               [0 for i in range(36)],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0],
#               [1, 2, 2, 2, 2, 2, 2, 3, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 8],
#               [5, 11, 11, 11, 11, 11, 11, 11, 2, 2, 11, 11, 11, -11, -11, -11, -11, -11, 11, 11, 11, 6, 0, 0, 1, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 3],
#               [-5, -11, -11, -11, -11, -11, -11, -2, -2, -2, -11, -11, -11, -11, -11, -11, -2, -2, -11, -11, 11, 11, 2, 2, 11, -11, -11, -11, -2, -2, -2, -2, -2, -2, -2, -3],
#               [-1, -2, -2, -2, -2, -2, -3, -7, 0, 0, -5, -11, -11, -11, -11, -3, 0, 0, -1, -11, -11, 11, 11, -11, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, -8],
#               [0, -0, -9, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0 for i in range(36)],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0 for i in range(36)],
#               [0 for i in range(36)]]
level1_map = [[0 for i in range(36)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0],
              [0 for i in range(36)],
              [0 for i in range(36)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0],
              [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0,
               0],
              [1, 2, 2, 2, 2, 2, 2, 3, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0,
               0, 0, 0, 0],
              [5, 11, 11, 11, 11, 11, 11, 11, 2, 2, 11, 11, 11, -11, -11, -11, -11, -11, 11, 11, 11, 6, 0, 0, 1, 11, 11,
               11, 11, 11, 11, 2, 2, 2, 2, 3],
              [-5, -11, -11, -11, -11, -11, -11, -2, -2, -2, -11, -11, -11, -11, -11, -11, -2, -2, -11, -11, 11, 11, 2,
               2, 11, -11, -11, -11, -2, -2, -2, -2, -2, -2, -2, -3],
              [-1, -2, -2, -2, -2, -2, -3, -7, 0, 0, -5, -11, -11, -11, -11, -3, 0, 0, -1, -11, -11, 11, 11, -11, -2,
               -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, -0, -9, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0, 0, -8, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0],
              [0 for i in range(36)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0],
              [0 for i in range(36)],
              [0 for i in range(36)]]
level2_map = [[0 for i in range(54)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0 for i in range(54)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 9, 0, 0, 0, 1, 2, 2, 3, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 7, 1,
               11, 11, 11, 6, 0, 0, 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [1, 2, 2, 3, 0, 0, 5, 11, 11, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
               11, -11, -11, 11, 6, 0, 0, 5, 11, 11, 6, 0, 0, 1, 3, 0, 0, 0, 0, 8],
              [5, 11, 11, 6, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
               11, 11, 11, 11, 11, 11, 11, -11, -11, -11, 11, 6, 0, 0, 5, -11, -11, 6, 0, 0, 5, 6, 0, 0, 1, 2, 3],
              [-5, -11, -11, -6, 0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, 11, 11, 11, -11, -11, -11, -2, -2,
               -2, -2, -2, -2, -2, -2, -2, -11, -11, -11, -11, -11, -11, -11, -11, -6, 0, 0, -5, -11, -2, -3, 0, 0, -5,
               -6, 0, 0, -1, -2, -3],
              [-1, -2, -2, -3, 0, 0, -1, -2, -2, -2, -11, -11, -11, -11, -2, -2, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, -7,
               -7, -7, -7, -2, -2, -2, -2, -2, -11, -11, -11, -6, 0, 0, -1, -3, 0, 0, 0, 0, -1, -3, 0, 0, 0, 0, -8],
              [0, 0, -9, 0, 0, 0, 0, 0, 0, -7, -1, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, -5, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               -1, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0 for i in range(54)],
              [0 for i in range(54)],
              [0 for i in range(54)]]
level3_map = [
    [0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 10, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
     0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 16, 18, 17],
    [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
     0, 5, 11, 11, 11, 11, 11, 2, 2, 3, 0, 0, 0, 7, 7, 7],
    [1, 2, 2, 3, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 11, 13, 13, 13, 13, 13, 13, 13, 11, 11, 2, 2, 3, 0, 0, 0, 50, 50, 50, 50,
     50, 50, 0, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 1, 2, 3],
    [5, 11, 11, 11, 2, 2, 2, 2, 2, 11, 11, 11, -11, -2, -3, -7, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 14, 0, 0, 0, 50, 50,
     50, 50, 50, 50, 0, 0, 0, -5, -11, -11, -11, -11, -11, -2, -2, -3, 0, 0, 0, -1, -2, -3],
    [-5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, -53, 0, 0, 0, 0, 0, 0, -5, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, -7, -7, -7],
    [-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52,
     0, 0, 0, 0, 0, 0, -15, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -18, -17],
    [0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -13, -13, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13, -11, -11, -11, -11, -11, -11, -11, -13, -13, -13, -13, -14, 0,
     0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
     -13, -13, -13, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13, -13, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
     -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
     -11, -11, -11, -11, -11, -11, -11, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
level4_map = [[0 for i in range(54)],
              [0 for i in range(54)],
              [0 for i in range(54)],
              [0 for i in range(54)],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 16, 18, 18, 18, 17, 0, 0, 0, 16, 18, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
               11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 5, 13, 14,
               0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 8],
              [1, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 0, 0,
               0, 0, 0, 0, 0, 0, 0, -7, -19, 0, 0, 0, 20, 0, 0, 0, 1, 2, 2, 3],
              [-1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, -1, -2, -2, -2, -2, -2, -2, -2,
               -2, -3, 0, 0, 0, 0, 0, 0, 0, -12, -13, -13, -6, 0, 0, 0, 20, 0, 0, 0, -1, -2, -2, -3],
              [0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0,
               -12, -13, -13, -13, -13, -11, -11, -11, -6, 0, 0, 0, 21, 0, 0, 0, 0, 0, -7, -7],
              [0, 0, 0, 0, 0, 0, 0, -16, -18, -18, -18, -17, 0, 0, 0, -16, -18, -18, -18, -17, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, -1, -2, -2, -2, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0],
              [0 for i in range(54)],
              [0 for i in range(54)],
              [0 for i in range(54)]]
level5_map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 13, 11, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0,
     0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
     2, 2, 2, 3, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 5, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 16, 18, 18, 18, 18, 18, 17, 0, 0,
     0, 5, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,
     11, 11, 11, 6, 0, 0, 16, 18, 18, 17, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11,
     11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 9, 0, 7, 5, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 50, 0,
     5, 11, 11, 11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 8],
    [1, 2, 2, 2, 2, 11, 11, 11, 11, 11, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 5, 11, 11, -11, -6, 0, 0, 0, 16, 18, 18, 17, 0, 0, 50, 50, 50, 50],
    [-1, -2, -2, -2, -2, -11, -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 5, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50],
    [0, 0, -9, 0, -7, -11, -11, -11, -11, -11, -2, -2, -2, -13, -13, -13, -13, -13, -13, -13, -17, 0, 0, 0, 0, 0, 0, 0,
     0, -16, -18, -18, -17, 0, 0, 0, -5, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, -8],
    [0, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, -1, -2, -2, -11, -11, -11, -6, 0, 0, 0, -16, -18, -18, -17, 0, 0, 0, 0,
     0, 0, 0, 0, -10, -1, -2, -2, -2, -3, 0, -16, -18, -18, -17, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -5, -11, -11, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12,
     -13, -13, -13, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13,
     -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0]]
level6_map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 0, 51, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 10,
     0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 14, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13,
     13, 13, 13, 13, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 18, 18, 18, 18, 17, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0,
     0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0],
    [0, 9, 0, 7, 20, 10, 0, 0, 0, 0, 0, 0, 7, 7, 5, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 8],
    [1, 2, 2, 2, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0,
     0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50],
    [-1, -2, -2, -2, -11, -2, -2, -2, -2, -2, -2, -2, -2, -2, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 16, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50],
    [0, -9, 0, 0, -20, -7, 0, 0, -7, 0, 0, 0, -7, 0, -5, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, -53, 0, -8],
    [0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, -3, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13,
     -14, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, -15, 0, 0, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, -16, -18, -18, -17, 0, 0, 0, -16, -18, -18, -17, 0,
     0, -5, -11, -11, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11,
     -11, -6, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11,
     -11, -6, -7, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
     -13, -13, -13, -13, -11, -11, -11, -11, -11, -11, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -13, -14, 0,
     -52, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
     -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -6, 0, -51, 0]]
level7_map = [
    [0, 0, 0, 51, 0, 0, 51, 0, 0, 51, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 52, 0, 0, 52, 0, 0, 52, 0, 12, 13, 13, 13, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
     50, 0, 0, 0, 0, 0, 50, 0, 0, 10, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 52, 0, 0, 52, 0, 0, 52, 0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
     0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
    [0, 0, 0, 52, 0, 0, 52, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 10, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 18, 18, 18, 17],
    [0, 0, 0, 52, 0, 0, 52, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 50, 0, 0, 0,
     0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 52, 0, 0, 53, 0, 50, 50, 50, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 23, 23, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
     0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 9, 0, 53, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 50, 50, 50, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 50, 0, 0, 5, 11, 11, -11, -11, -6, 0, 0, 50, 50, 50, 0, 0,
     50, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, -9, 0, -53, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -2, -2, -3, 0, 0, 50, 50, 50, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -52, 0, 0, -53, 0, 50, 50, 50, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, -23, -23, 0, 0, 0, 0, -53, 0, 0, 0,
     0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -52, 0, 0, -52, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 50, 0,
     0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -52, 0, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, -10,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -18, -18, -18, -18, -17],
    [0, 0, 0, -52, 0, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, -12, -13, -13, -13, -13, -13, -6, 0, 0, 0, 0, 0, 0, 0, -52, 0,
     0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8],
    [0, 0, 0, -52, 0, 0, -52, 0, 0, -52, 0, -12, -13, -13, -13, -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0,
     -52, 0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -52, 0, 0, -52, 0, 0, -52, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0,
     -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -51, 0, 0, -51, 0, 0, -51, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -6, 0, 0, 0, 0, 0, 0, 0,
     -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
level8_map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 12, 13, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 11, 11, 11, 11, 11, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 11, 11, 11, 11, 11, 11, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 14],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0],
    [0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 52, 0, 0, 0],
    [0, 9, 0, 1, 2, 2, 2, 2, 2, 3, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 16, 18, 18, 18, 18, 18, 2,
     3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0],
    [1, 2, 2, 11, 11, 11, 11, 11, 11, 6, 0, 0, 0, 21, 0, 0, 0, 21, 0, 0, 0, 50, 50, 50, 50, 50, 0, 0, 0, 0, -10, 0, 0,
     0, 5, 11, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 8],
    [-1, -2, -2, -2, -11, -11, -11, -11, -11, -11, -14, 0, 0, 0, -21, 0, 0, 0, -21, 0, 0, 50, 50, 50, 50, 50, 0, 0, 0,
     0, 0, 0, 0, 0, 12, 13, 13, 13, 14, 0, 0, 0, 16, 18, 17, 0, 0, 0, 50, 50, 50, 50, 50, 50],
    [0, -9, 0, 0, -1, -2, -2, -2, -2, -2, -3, 0, 0, 0, -20, 0, 0, 0, -20, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -18, -18, -18, -18, -18, -17, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -18, -17, 0, 0, 0, 50, 50, 50, 50, 50, 50],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, -8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, -18,
     -18, -18, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13, -13, -13, -13, -13, -13, -13, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -13, -13, -13, -13, -13, -13,
     -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -14, 0, -51, 0, 0, 0]]
level9_map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 16, 18, 17, 0, 0, 0, 0, 52, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 24, 0, 9, 0, 0, 0, 0, 0, 0,
     0, 0, 15, 0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 0, 8],
    [5, 11, 6, 0, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 0, 0, 12, 11, 11, 11, 11, 11, 11, 11, 3, 0, 0, 1, 2, 2, 2, 3, 0,
     0, 22, 0, 0, 0, 0, 12, 2, 2, 2, 2, 2, 11, 11, 11, 11, 2, 2, 2, 3],
    [-5, -11, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 50, 0, 0, 0, -5, -11, -11, -11, -11, -2, -2, -3, 0, 0, -1, -2, -2,
     -2, -3, 0, 0, 0, -22, 0, 0, 0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -2, -2, -2, -3],
    [-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, -5, -11, -11, -11, -6, -7, 0, 0, 0, 0, 0, -24, 0, -9, 0,
     0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11, -11, -11, -11, -2, -3, 0, 0, 0, -8],
    [0, 0, 0, 0, 0, 0, -16, -18, -18, -18, -17, 0, -52, 0, 0, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, -5, -11, -11, -11, -11, -2, -3, 0, 0, 0, 0, 0, 0],
    [0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     -10, 0, 0, 0, -1, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

level10_map = []

level11_map = [
    [0, 0, 0, 0, 0, 0, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 51, 0, 0, 0, 0,
     51, 0, 0, 0, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 51, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 0, 52, 0, 0, 0, 10,
     52, 0, 0, 0, 26, 12, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 6, 52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 14, 0, 52, 0, 0, 0, 0, 52,
     0, 0, 0, 0, 26, 26, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 13, 13, 13, 13, 13, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 53, 0, 0,
     0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 52, 0, 0, 50, 50, 50, 50, 0, 0,
     1, 3, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6,
     0, 0, 16, 18, 18, 18, 18, 18, 17, 0, 0, 52, 0, 0, 0, 8],
    [0, 0, 0, 9, 0, 0, 0, 7, 1, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 0, 0, 0, 0, 0, 0, 5,
     6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 1, 3],
    [1, 2, 2, 2, 2, 2, 2, 2, 11, 11, 11, 11, 11, 11, 11, 11, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,
     5, 11, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 50, 50, 50, 0, 5, 6],
    [-1, -2, -2, -2, -2, -2, -2, -2, -11, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, -7, -5, -11, -11, -11, -11, -11, -11, -11, -13, -13, -14, 0, 50, 50, 50, 0, -5, -6],
    [0, 0, 0, -9, 0, 0, -7, -7, -20, -23, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 0, 0,
     0, 0, -5, -11, -11, -11, -11, -11, -11, -11, -11, -11, -6, 0, 0, -53, 0, 0, -1, -3],
    [0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, -12, -13, -13, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0,
     0, 0, -5, -2, -2, -2, -2, -2, -2, -2, -2, -2, -3, 0, 0, -52, 0, 0, 0, -8],
    [0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -5, -11, -11, -11, -13, -13, -14, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 0, 0, -52,
     0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -2, -2, -2, -2, -2, -3, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, -52, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, -10, 0, 0, -52, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -13, -13, -13, -13, -14],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, -12, -13, -13, -13, -13, -13, -11, -11, -11, -11, -11, -6]]

level12_map = []
level13_map = []
level14_map = []
level15_map = []
current_level_map = level1_map

##diamonds collected
collected_blue = 0
blue_diamonds_req = 0
collected_red = 0
red_diamonds_req = 0

##deleted blocks
deleted_blocks = []

##lives
lives = 3

##colours
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

##tiles
TILE_SCALE = 48

##character starting x coordinates
angel_x = 0
angel_y = 0
devil_x = 0
devil_y = 0

##endless background scroll variable(s)
scroll = 0

##screens
start = False
objective = True
controls = False
level_selection = False
game = False


##functions and classes
def side_panel():
    global lives
    unused_lives = [(15.5, 20), (15.5, 54), (15.5, 88)]
    used_lives = [(15.5, 20), (15.5, 54), (15.5, 88)]
    screen.blit(pygame.image.load('SIDE PANEL/PANEL.png'), (0, 0))
    screen.blit(pygame.image.load('SIDE PANEL/PANEL.png'), (1219, 0))
    font = pygame.font.SysFont("Helvetica", 20)
    blue_diamonds_text = font.render(str(collected_blue) + "/" + str(blue_diamonds_req), True, BLACK)
    red_diamonds_text = font.render(str(collected_red) + "/" + str(red_diamonds_req), True, BLACK)
    screen.blit(pygame.transform.scale(pygame.image.load('GAME TILES/TILE_B10.png'), (48, 48)), (15.5, 198))
    screen.blit(blue_diamonds_text, (24, 178))
    screen.blit(pygame.transform.scale(pygame.image.load('GAME TILES/TILE_R10.png'), (48, 48)), (15.5, 522))
    screen.blit(red_diamonds_text, (24, 572))
    for i in range(0, 3):
        if i == lives - 1:
            for x in range(0, i + 1):
                screen.blit(pygame.transform.scale(pygame.image.load('SIDE PANEL/HEART_ALIVE.png'), (48, 48)),
                            (unused_lives[x]))
        elif i < lives - 1:
            for x in range(0, i + 1):
                screen.blit(pygame.transform.scale(pygame.image.load('SIDE PANEL/HEART_DEAD.png'), (48, 48)),
                            (used_lives[x]))
        else:
            screen.blit(pygame.transform.scale(pygame.image.load('SIDE PANEL/HEART_DEAD.png'), (48, 48)),
                        (used_lives[i]))


def background_scroll(bg, scroll_num):
    global scroll
    bg_width = bg.get_width()
    tiles = math.ceil(SCREEN_WIDTH / bg_width) + 1
    for i in range(0, tiles):
        screen.blit(bg, (i * bg_width + scroll, 0))

    scroll -= scroll_num

    if abs(scroll) > bg_width:
        scroll = 0


def reset():
    global collected_blue, collected_red, lives, deleted_blocks, angel_x, angel_y, devil_x, devil_y, reset
    angel.rect.x = angel_x
    angel.rect.y = angel_y
    devil.rect.x = devil_x
    devil.rect.y = devil_y
    collected_blue = 0
    collected_red = 0
    for a in deleted_blocks:
        map.level_map.append(a)
    deleted_blocks.clear()
    for final_block in map.level_map:
        if final_block[2] == 25:
            map.level_map.remove(final_block)
        if final_block[2] == -25:
            map.level_map.remove(final_block)
    lives = 3
    pygame.time.delay(1000)


class Button():
    def __init__(self, x, y, w, h, image, imageHover, action=None, action2=None):
        self.rect = pygame.Rect(x, y, w, h)
        self.image = image
        self.imageHover = imageHover
        self.action = action
        self.action2 = action2
        self.clicked = False

    def check_collide(self):
        global on_button, current_level_map, game, level_selection, map, reset
        mouse_pos = pygame.mouse.get_pos()

        on_button = self.rect.collidepoint(pygame.mouse.get_pos())

        if self.rect.collidepoint(mouse_pos):
            if pygame.mouse.get_pressed()[0]:
                self.clicked = True
        elif self.clicked == True:
            current_level_map = self.action
            map = Map(current_level_map)
            self.clicked = False
            game = True
            level_selection = False
        else:
            screen.blit(self.image, self.image.get_rect(center=self.rect.center))

    def draw(self, surf):
        global image
        if self.action2 == "locked":
            self.image = pygame.image.load('LEVELS BUTTONS/LEVEL_LOCKED.png')
            surf.blit(self.image, self.image.get_rect(center=self.rect.center))
        else:
            self.check_collide()
            if on_button:
                surf.blit(self.imageHover, self.imageHover.get_rect(center=self.rect.center))


class Sprite():
    def __init__(self, x, y, NAME):
        self.NAME = NAME
        self.images_right = []
        self.images_left = []
        self.index = 0
        self.counter = 0
        for n in range(0, 3):
            img_right = pygame.image.load('SPRITES/' + self.NAME + '_' + str(n) + '.png')
            if NAME == 'DEVIL':
                img_right = pygame.transform.flip(img_right, False, True)
            img_left = pygame.transform.flip(img_right, True, False)
            self.images_right.append(img_right)
            self.images_left.append(img_left)
        self.image = self.images_right[self.index]
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.width = self.image.get_width()
        self.height = self.image.get_height()
        self.vel_y = 0
        self.jumped = False
        self.direction = None

    def update(self):
        global screen_scroll_num, collected_blue, collected_red, lives, deleted_blocks, current_level_map, game, level_selection

        dx = 0
        dy = 0
        cooldown = 5
        angel_door = False
        devil_door = False

        # key presses
        key = pygame.key.get_pressed()
        if key[pygame.K_SPACE] and self.jumped == False:
            self.vel_y = -15
            self.jumped = True
        if key[pygame.K_SPACE] == False:
            self.jumped = False
        if key[pygame.K_LEFT]:
            dx -= 4
            self.counter += 1
            self.direction = 'left'
        if key[pygame.K_RIGHT]:
            dx += 4
            self.counter += 1
            self.direction = 'right'
        if key[pygame.K_LEFT] == False and key[pygame.K_RIGHT] == False:
            self.counter = 0
            self.index = 0
            if self.direction == 'right':
                self.image = self.images_right[self.index]
            if self.direction == 'left':
                self.image = self.images_left[self.index]

        # animation
        if self.counter > cooldown:
            self.counter = 0
            self.index += 1
            if self.index >= len(self.images_right) - 1:
                self.index = 0
            if self.direction == 'right':
                if key[pygame.K_SPACE]:
                    self.image = self.images_right[2]
                else:
                    self.image = self.images_right[self.index]
            if self.direction == 'left':
                if key[pygame.K_SPACE]:
                    self.image = self.images_left[2]
                else:
                    self.image = self.images_left[self.index]

        # gravity
        self.vel_y += 1
        if self.vel_y > 10:
            self.vel_y = 10
        dy += self.vel_y

        decorations = map.decorations

        # collision
        for final_block in map.level_map:

            # check if diamond is hit
            if final_block[2] == 10:
                if final_block[1].colliderect(angel.rect.x, angel.rect.y, angel.width, angel.height):
                    print(final_block[1])
                    collected_blue += 1
                    deleted_blocks.append(final_block)
                    map.level_map.remove(final_block)

            if final_block[2] == -10:
                if final_block[1].colliderect(devil.rect.x, devil.rect.y, devil.width, devil.height):
                    collected_red += 1
                    deleted_blocks.append(final_block)
                    map.level_map.remove(final_block)

            # check if player collides with spikes
            if final_block[2] == 23:
                if final_block[1].colliderect(angel.rect.x, angel.rect.y, angel.width, angel.height):
                    if final_block[1].y - (angel.rect.height - final_block[1].height) > angel.rect.y:
                        angel.rect.y -= 100
                    elif final_block[1].x >= angel.rect.x:
                        angel.rect.x -= 30
                    elif final_block[1].x <= angel.rect.x:
                        angel.rect.x += 30
                    lives -= 1

            if final_block[2] == -23:
                if final_block[1].colliderect(devil.rect.x, devil.rect.y, devil.width, devil.height):
                    if final_block[1].y < devil.rect.y:
                        devil.rect.y += 100
                    elif final_block[1].x >= devil.rect.x:
                        devil.rect.x -= 30
                    elif final_block[1].x <= devil.rect.x:
                        devil.rect.x += 30
                    lives -= 1

            ##open door(s)
            if final_block[2] == 8 and collected_blue == blue_diamonds_req:
                deleted_blocks.append(final_block)
                map.level_map.remove(final_block)
                block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_B25.png'), (48, 48))
                block_rect = final_block[1]
                block_rect.x = final_block[1].x
                block_rect.y = final_block[1].y
                final_block = (block, block_rect, 25)
                map.level_map.append(final_block)

            if final_block[2] == -8 and collected_red == red_diamonds_req:
                deleted_blocks.append(final_block)
                map.level_map.remove(final_block)
                block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_R25.png'), (48, 48))
                block_rect = final_block[1]
                block_rect.x = final_block[1].x
                block_rect.y = final_block[1].y
                final_block = (block, block_rect, -25)
                map.level_map.append(final_block)

            ##check if players both "walk" through their doors
            if final_block[2] == 25:
                if final_block[1].x == angel.rect.x and final_block[1].y == angel.rect.y:
                    angel_door = True

            if final_block[2] == -25:
                if final_block[1].x == devil.rect.x and final_block[1].y == devil.rect.y:
                    devil_door = True

            if angel_door == True and devil_door == True:
                level_selection = True
                game = False

                dx = 0
                dy = 0
                # pygame.time.delay(1000)
                # current_level_map = level2_map

            # check for collision in x direction
            if final_block[2] not in decorations:
                if final_block[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
                    dx = 0

                if self.NAME == 'ANGEL':
                    # check for collision in y direction for angel
                    if final_block[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                        # jumping
                        if self.vel_y < 0:
                            dy = final_block[1].bottom - self.rect.top
                            self.vel_y = 0
                        # falling
                        elif self.vel_y >= 0:
                            dy = final_block[1].top - self.rect.bottom
                            self.vel_y = 0
                elif self.NAME == 'DEVIL':
                    # check for collision in y direction for devil
                    if final_block[1].colliderect(self.rect.x, self.rect.y - dy, self.width, self.height):
                        # jumping
                        if self.vel_y < 0:
                            dy = self.rect.bottom - final_block[1].top
                            self.vel_y = 0
                        # falling
                        elif self.vel_y >= 0:
                            dy = self.rect.top - final_block[1].bottom
                            self.vel_y = 0

        # update player coordinates
        if self.NAME == 'ANGEL':
            self.rect.x += dx
            self.rect.y += dy

        elif self.NAME == 'DEVIL':
            self.rect.x += dx
            self.rect.y -= dy

        screen.blit(self.image, self.rect)


class Map():
    def __init__(self, level):
        self.level_map = []
        self.decorations = []

        global blue_diamonds_req, red_diamonds_req, angel_x, angel_y, devil_x, devil_y

        def add_block(y_difference):
            block_rect = block.get_rect()
            block_rect.x = tile_x * TILE_SCALE
            block_rect.y = (tile_y * TILE_SCALE) + y_difference
            final_block = (block, block_rect, tile)
            self.level_map.append(final_block)

        tile_y = 0
        for layer in level:
            tile_x = 0
            for tile in layer:
                if tile > 0 and tile <= 49:
                    if tile == 23:
                        block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_B' + str(tile) + '.png'),
                                                       (48, 24))
                        add_block(24)
                    elif tile == 26:
                        block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_B' + str(tile) + '.png'),
                                                       (48, 24))
                        add_block(0)
                    else:
                        block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_B' + str(tile) + '.png'),
                                                       (48, 48))
                        add_block(0)
                    if tile == 9:
                        angel_x = (tile_x * TILE_SCALE) - 48
                        angel_y = tile_y * TILE_SCALE
                    if tile == 10:
                        blue_diamonds_req += 1
                if tile < 0 and tile >= -49:
                    if tile == -23:
                        block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_R23.png'), (48, 24))
                        add_block(0)
                    else:
                        block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_R' + str(abs(tile)) + '.png'),
                                                       (48, 48))
                        add_block(0)
                    if tile == -9:
                        devil_x = (tile_x * TILE_SCALE) - 48
                        devil_y = tile_y * TILE_SCALE
                    if tile == -10:
                        red_diamonds_req += 1
                if tile >= 50 and tile <= 53:
                    block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_' + str(tile) + '.png'), (48, 48))
                    add_block(0)
                if tile <= -50 and tile >= -53:
                    block = pygame.transform.scale(pygame.image.load('GAME TILES/TILE_' + str(tile) + '.png'), (48, 48))
                    add_block(0)
                tile_x += 1
            tile_y += 1

        self.decorations = [9, -9, 51, -51, 52, -52, 53, -53, 10, -10, 23, -23, 25, -25]

    def draw(self):
        for final_block in self.level_map:
            # level reset
            if lives <= 0:
                reset()

            screen.blit(final_block[0], final_block[1])


##buttons
# START_BUTTONS = [Button()]

LEVEL_BUTTONS = [Button(268, 250, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_1.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_1_HOVER.png'), level1_map, "unlocked"),
                 Button(434, 250, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_2.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_2_HOVER.png'), level2_map, "unlocked"),
                 Button(600, 250, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_3.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_3_HOVER.png'), level3_map, "unlocked"),
                 Button(766, 250, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_4.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_4_HOVER.png'), level4_map, "unlocked"),
                 Button(932, 250, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_5.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_5_HOVER.png'), level5_map, "unlocked"),
                 Button(268, 390, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_6.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_6_HOVER.png'), level6_map, "unlocked"),
                 Button(434, 390, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_7.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_7_HOVER.png'), level7_map, "unlocked"),
                 Button(600, 390, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_8.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_8_HOVER.png'), level8_map, "unlocked"),
                 Button(766, 390, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_9.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_9_HOVER.png'), level9_map, "unlocked"),
                 Button(932, 390, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_10.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_10_HOVER.png'), level10_map, "locked"),
                 Button(268, 530, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_11.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_11_HOVER.png'), level11_map, "unlocked"),
                 Button(434, 530, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_12.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_12_HOVER.png'), level12_map, "locked"),
                 Button(600, 530, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_13.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_13_HOVER.png'), level13_map, "locked"),
                 Button(766, 530, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_14.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_14_HOVER.png'), level14_map, "locked"),
                 Button(932, 530, 96, 90, pygame.image.load('LEVELS BUTTONS/LEVEL_15.png'),
                        pygame.image.load('LEVELS BUTTONS/LEVEL_15_HOVER.png'), level15_map, "locked")]

##main game loop
while True:
    clock.tick(FPS)
    key = pygame.key.get_pressed()

    enter_pressed = False

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
            enter_pressed = True
        if event.type == pygame.KEYUP and event.key == pygame.K_RETURN:
            enter_pressed = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()

    if key[pygame.K_ESCAPE]:
        pygame.quit()

    if start == True:
        background_scroll(pygame.image.load('CLOUD_BG.png'), 2)

    elif objective == True:
        background_scroll(pygame.image.load('CLOUD_BG.png'), 2)

        screen.blit(pygame.image.load('TEXT/OBJECTIVE_TEXT.png'), (468, 170))
        screen.blit(pygame.transform.scale(pygame.image.load('TEXT/OBJECTIVE_TEXT2.png'), (1000, 700)), (148, 20))

        if enter_pressed == True:
            objective = False
            controls = True

    elif controls == True:
        background_scroll(pygame.image.load('CLOUD_BG.png'), 2)

        screen.blit(pygame.image.load('TEXT/CONTROLS_TEXT.png'), (488, 170))
        screen.blit(pygame.transform.scale(pygame.image.load('TEXT/CONTROLS_TEXT2.png'), (1200, 672)), (48, 48))
        screen.blit(pygame.transform.scale(pygame.image.load('TEXT/CONTROLS_TEXT3.png'), (1000, 700)), (148, 20))

        if enter_pressed == True:
            controls = False
            level_selection = True

    elif level_selection == True:
        background_scroll(pygame.image.load('CLOUD_BG.png'), 2)

        screen.blit(pygame.image.load('TEXT/SELECT_A_LEVEL_TEXT.png'), (372, 140))

        for b in LEVEL_BUTTONS:
            b.draw(screen)

        angel = Sprite(angel_x, angel_y, 'ANGEL')
        devil = Sprite(devil_x, devil_y, 'DEVIL')

    elif game == True:
        background_scroll(pygame.image.load('GAME_BG.png'), 3)

        map.draw()

        angel.update()
        devil.update()

        side_panel()

    pygame.display.update()

pygame.quit()
